scalar DateTime
# // schema.graphql

type User {
  _id: ID!
  name: String!
  screenName: String
  twitterId: String!
  profilePhotoUrl: String!
  role: UserRole!
}

enum UserRole {
  USER
  ADMIN
}

type Show {
  _id: ID!
  title: String!
  synopsis: String!
  imdbId: String
  tmdbId: String!
  tmdbPoster: String
  tmdbBackdrop: String
  originalName: String
  reviewCount: Int!
  actingAverage: Float!
  plotAverage: Float!
  visualsAverage: Float!
  totalAverage: Float!
  mediaType: String
  cast: [Actor!]
  releaseDate: String!
  
}

type Actor {
  _id: ID!
  name: String!
  imdbId: String
  tmdbId: String!
  profileImage: String
  gender: String
  homepage: String
  biography: String
  starredIn: [Show!]
}

type Review {
  _id: ID!
  user: User!
  show: Show!
  title: String!
  overallRating: Float!
  actingRating: Float!
  plotRating: Float!
  visualsRating: Float!
  createdAt: DateTime!
  commentCount: Int
  likeCount: Int
  body: String!
  liked: Boolean!
}

type Mutation {
  createComment(reviewId: ID!, commentBody: String!): Comment!
  likeReview(reviewId: ID!): Like!
}


type Comment {
  _id: ID!
  user: User!
  review: Review!
  commentBody: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Like {
  _id: ID!
  user: User!
  review: Review!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FilterInput {
  page: Int
  limit: Int
  search: String
}

type Query {
  reviews(filter: FilterInput): [Review]
  review(id: ID!): Review
  showReviews(id: ID!, filter: FilterInput): [Review]

  shows(filter: FilterInput): [Show]
  show(id: ID!): Show

  users: [User]
  user(id: ID!): User

  reviewComments(id: ID!, filter: FilterInput): [Comment!]
}

